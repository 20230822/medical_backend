{"version":3,"file":"static/js/940.b8245995.chunk.js","mappings":"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","sources":["components/headerUser.js","components/singleMessage.js","components/chatting.js","routes/VideoChatting.js"],"sourcesContent":["import \"../style/headerUser.css\";\r\n\r\nfunction HeaderUser() {\r\n  \r\n  return (\r\n    <div className=\"header-user\">\r\n      <span className=\"header-user-name\">name</span>\r\n      <span className=\"header-user-icon\"></span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeaderUser;\r\n","import React from 'react';\r\nimport '../style/chat.css';\r\n\r\nfunction SingleMessage({ user_id, content, isMyMessage }) {\r\n  return (\r\n    <div className={`message ${isMyMessage ? 'my-message' : 'other-message'}`}>\r\n      <div className=\"message-sender\">{user_id}</div>\r\n      <div className=\"message-content\">{content}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleMessage;","import React, { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport Message from './singleMessage';\r\nimport '../style/chat.css';\r\nimport sendicon from \"../images/send-icon.png\";\r\n\r\nexport let socket = io.connect(process.env.REACT_APP_awsChatLink, {\r\n  transports : ['websocket'],\r\n  cors: {\r\n    origin: \"*\"\r\n  }\r\n});\r\n\r\nfunction Chatting() {\r\n  const [textValue, setTextValue] = useState(\"\");\r\n  const [Messages, setMessages] = useState([]);\r\n  const [SendMessages, setSendMessages] = useState({\r\n    user_id: \"\",\r\n    content: \"\",\r\n    patient_cd: \"\",\r\n  });\r\n\r\n  const handleSetValue = (e) => {\r\n    setTextValue(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket.emit('enter_room', '0229', ack => {\r\n      if (ack === false) {\r\n        socket.on('error', data => {\r\n          console.error(data);\r\n        })\r\n      }\r\n      if (ack === true) {\r\n        socket.on('message_log', data => {\r\n          setMessages(prevMessages => [\r\n            ...prevMessages,\r\n            ...data\r\n          ]);\r\n        })\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // SendMessages가 변경되면 실행되는 부분\r\n    if (SendMessages.user_id) {\r\n      socket.emit(\"message\", JSON.stringify(SendMessages), (ack) => {\r\n        if (ack === false) {\r\n          socket.on('error', data => {\r\n            console.error(data);\r\n          });\r\n        }\r\n      });\r\n      setTextValue('');\r\n    }\r\n  }, [SendMessages]);\r\n\r\n  useEffect(() => {\r\n    // 서버로부터의 메시지가 수신되면 실행\r\n    const handleReceivedMessage = (data) => {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        {\r\n          user: data.user_id,\r\n          content: data.content,\r\n        },\r\n      ]);\r\n    };\r\n\r\n    socket.on(\"message\", handleReceivedMessage);\r\n\r\n    // 언마운트 시 이벤트 리스너 해제\r\n    return () => {\r\n      socket.off(\"message\");\r\n    };\r\n  }, []);\r\n\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    // 서버로 메시지를 전송한다.\r\n    setSendMessages({\r\n      user_id: \"rks\",\r\n      content: textValue,\r\n      patient_cd: \"0229\"\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"videoChatting-textChatting-group-textChat \">\r\n      <h2 className=\"videoChatting-textChatting-group-textChat-text\">Chat</h2>\r\n      <div className=\"videoChatting-textChatting-group-textChat-chat\">\r\n        <div className=\"chat-container\">\r\n          {Messages.map((msg, index) => (\r\n            <Message\r\n              key={index}\r\n              user_id={msg.user}\r\n              content={msg.content}\r\n              isMyMessage={msg.user_id === '홍길동'}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"videoChatting-textChatting-group-textChat-input\">\r\n          <textarea\r\n            type=\"text\"\r\n            name=\"content\"\r\n            value={textValue}\r\n            onChange={(e) => handleSetValue(e)}\r\n            className=\"videoChatting-textChatting-group-textChat-input-typing\"\r\n          />\r\n          <button\r\n            className=\"videoChatting-textChatting-group-textChat-input-button\"\r\n            onClick={handleFormSubmit}\r\n          >\r\n            <img src={sendicon} alt=\"sendicon\" className=\"sendicon\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatting;\r\n","import \"../style/VideoChatting.css\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport io from 'socket.io-client';\r\nimport 'webrtc-adapter';\r\nimport HeaderUser from \"../components/headerUser\";\r\nimport Chatting from '../components/chatting'\r\nimport { MaxScreen, ResizeScreen, ArrowDown, ArrowUp, ArrowLeft, ArrowRight, QuitIcon, MicOn, MicOff, CameraOn, CameraOff, ShareOn, ShareOff } from \"../images\";\r\n\r\nexport let socket = io.connect(process.env.REACT_APP_awsVideoLink, {\r\n  transports : ['websocket'],\r\n  cors: {\r\n    origin: \"*\"\r\n  }\r\n});\r\n\r\nfunction VideoChatting() {\r\n  const [isRemoteVideoClose, setIsRemoteVideoOpen] = useState(false);\r\n  const [isTextChattingClose, setIsTextChattingOpen] = useState(false);\r\n  const [isMicOn, setIsMicOn] = useState(false);\r\n  const [isCameraOn, setIsCameraOn] = useState(false);\r\n  const [isShareOn, setIsShareOn] = useState(false);\r\n\r\n  let isInitiator = false;\r\n  let isStarted = false;\r\n  let localStream = null;\r\n  let isChannelReady = false;\r\n  let pc = null;\r\n\r\n  const localVideoRef = useRef(null);\r\n  const remoteVideoRef = useRef(null);\r\n  /* 여기서부터 화상 채팅*/\r\n  const pcConfig = {\r\n    iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],\r\n  };\r\n\r\n  const room = '0229';\r\n\r\n  useEffect(() => {\r\n    if (room !== '') {\r\n      socket.emit('create or join', room, (acknowledgmentData) => {\r\n        if (acknowledgmentData === false) {\r\n          console.log('없는 환자입니다.');\r\n        } else {\r\n          console.log('존재하는 환자입니다.!');\r\n        }\r\n      });\r\n      console.log('Attempted to create or join Room', room);\r\n    }\r\n\r\n    socket.on('created', (room, id) => {\r\n      console.log('Created room' + room + 'socket ID : ' + id);\r\n      isInitiator = true;\r\n      console.log('isInitiator', isInitiator);\r\n    });\r\n\r\n    socket.on('full', (room) => {\r\n      console.log('Room ' + room + 'is full');\r\n    });\r\n\r\n    socket.on('join', (room) => {\r\n      console.log('Another peer made a request to join room' + room);\r\n      console.log('This peer is the initiator of room' + room + '!');\r\n      isChannelReady = true;\r\n      console.log('isChannelRead', isChannelReady);\r\n    });\r\n\r\n    socket.on('joined', (room) => {\r\n      console.log('joined : ' + room);\r\n      isChannelReady = true;\r\n    });\r\n\r\n    socket.on('log', (array) => {\r\n      console.log.apply(console, array);\r\n    });\r\n\r\n    socket.on('message', (message) => {\r\n      console.log('Client received message :', message);\r\n      if (message === 'got user media') {\r\n        maybeStart();\r\n      } else if (message.type === 'offer') {\r\n        if (!isInitiator && !isStarted) {\r\n          maybeStart();\r\n        }\r\n        pc.setRemoteDescription(new RTCSessionDescription(message));\r\n        doAnswer();\r\n      } else if (message.type === 'answer' && isStarted) {\r\n        pc.setRemoteDescription(new RTCSessionDescription(message));\r\n      } else if (message.type === 'candidate' && isStarted) {\r\n        const candidate = new RTCIceCandidate({\r\n          sdpMLineIndex: message.label,\r\n          candidate: message.candidate,\r\n        });\r\n\r\n        pc.addIceCandidate(candidate);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      // Cleanup code if needed\r\n    };\r\n  }, []); // Empty dependency array means this effect runs once after the initial render\r\n\r\n  useEffect(() => {\r\n    navigator.mediaDevices\r\n      .getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      })\r\n      .then(gotStream)\r\n      .catch((error) => console.error(error));\r\n  }, []);\r\n\r\n  const gotStream = (stream) => {\r\n    console.log('Adding local stream');\r\n    localStream  = stream;\r\n    localVideoRef.current.srcObject = stream;\r\n    sendMessage('got user media');\r\n    if (isInitiator) {\r\n      maybeStart();\r\n    }\r\n  };\r\n\r\n  const createPeerConnection = () => {\r\n    try {\r\n      const peerConnection = new RTCPeerConnection(pcConfig);\r\n      peerConnection.onicecandidate = handleIceCandidate;\r\n      peerConnection.onaddstream = handleRemoteStreamAdded;\r\n      console.log('Created RTCPeerConnection');\r\n      pc = peerConnection;\r\n    } catch (e) {\r\n      alert('Cannot create RTCPeerConnection object');\r\n    }\r\n  };\r\n\r\n  const handleIceCandidate = (event) => {\r\n    console.log('iceCandidateEvent', event);\r\n    if (event.candidate) {\r\n      sendMessage({\r\n        type: 'candidate',\r\n        label: event.candidate.sdpMLineIndex,\r\n        id: event.candidate.sdpMid,\r\n        candidate: event.candidate.candidate,\r\n      });\r\n    } else {\r\n      console.log('End of candidates');\r\n    }\r\n  };\r\n\r\n  const handleCreateOfferError = (event) => {\r\n    console.log('createOffer() error: ', event);\r\n  };\r\n\r\n  const handleRemoteStreamAdded = (event) => {\r\n    console.log('remote stream added');\r\n    const remoteStream = event.stream || event.target.stream || null;\r\n\r\n    if (remoteStream) {\r\n      remoteVideoRef.current.srcObject = remoteStream;\r\n    } else {\r\n      console.error('Cannot find the stream.');\r\n    }\r\n  };\r\n\r\n  const maybeStart = () => {\r\n    console.log('>>MaybeStart() : ', isStarted, localStream, isChannelReady);\r\n    if (!isStarted && typeof localStream !== 'undefined' && isChannelReady) {\r\n      console.log('>>>>> creating peer connection');\r\n      createPeerConnection();\r\n      pc.addStream(localStream);\r\n      isStarted = true ;\r\n      console.log('isInitiator : ', isInitiator);\r\n      if (isInitiator) {\r\n        doCall();\r\n      }\r\n    } else {\r\n      console.error('maybeStart not Started!');\r\n    }\r\n  };\r\n\r\n  const doCall = () => {\r\n    console.log('Sending offer to peer');\r\n    pc.createOffer(setLocalAndSendMessage, handleCreateOfferError);\r\n  };\r\n\r\n  const doAnswer = () => {\r\n    console.log('Sending answer to peer');\r\n    pc.createAnswer().then(setLocalAndSendMessage, onCreateSessionDescriptionError);\r\n  };\r\n\r\n  const setLocalAndSendMessage = (sessionDescription) => {\r\n    pc.setLocalDescription(sessionDescription);\r\n    sendMessage(sessionDescription);\r\n  };\r\n\r\n  const onCreateSessionDescriptionError = (error) => {\r\n    console.error('Failed to create session Description', error);\r\n  };\r\n\r\n  const sendMessage = (message) => {\r\n    console.log('Client sending message: ', message);\r\n    socket.emit('message', message);\r\n  };\r\n\r\n  /*여기까지 화상채팅*/\r\n\r\n  const handleScreenSizeMax = () => {\r\n    setIsRemoteVideoOpen(false);\r\n    setIsTextChattingOpen(false);\r\n  }\r\n\r\n  const handleScreenSizeSmall = () => {\r\n    setIsRemoteVideoOpen(true);\r\n    setIsTextChattingOpen(true);\r\n  }\r\n\r\n  const handleRemoteVideoOpen = () => {\r\n    setIsRemoteVideoOpen(!isRemoteVideoClose);\r\n  };\r\n\r\n  const handleTextChattingOpen = () => {\r\n    setIsTextChattingOpen(!isTextChattingClose);\r\n  };\r\n\r\n  return (\r\n    <div className=\"videoChatting\">\r\n      <header className=\"videoChatting-header\">\r\n        <h2 className=\"videoChatting-header-text\">\r\n          Live Chat\r\n        </h2>\r\n        <div className=\"videoChatting-header-quit\">\r\n          <img src={QuitIcon} alt=\"QuitIcon\" className=\"videoChatting-header-quit-icon\" />\r\n          <h4 className=\"videoChatting-header-quit-text\">\r\n            Quit Live Chat\r\n          </h4>\r\n        </div>\r\n        <div className={`videoChatting-header-mic${isMicOn ? \"-Activie\" : \"\"}`} onClick={() => setIsMicOn(!isMicOn)}>\r\n          <div className=\"videoChatting-header-mic-onoff\">\r\n            <img src={MicOn} alt=\"MicOn\" className=\"videoChatting-header-mic-on\" />\r\n            <img src={MicOff} alt=\"MicOff\" className=\"videoChatting-header-mic-off\" />\r\n          </div>\r\n          <div className={`slider-mic${isMicOn ? \"-Activie\" : \"\"}`}></div>\r\n        </div>\r\n\r\n        <div className={`videoChatting-header-camera${isCameraOn ? \"-Activie\" : \"\"}`} onClick={() => setIsCameraOn(!isCameraOn)}>\r\n          <div className=\"videoChatting-header-camera-onoff\">\r\n            <img src={CameraOn} alt=\"MicOn\" className=\"videoChatting-header-camera-on\" />\r\n            <img src={CameraOff} alt=\"MicOff\" className=\"videoChatting-header-camera-off\" />\r\n          </div>\r\n          <div className={`slider-camera${isCameraOn ? \"-Activie\" : \"\"}`}></div>\r\n        </div>\r\n\r\n        <div className={`videoChatting-header-share${isShareOn ? \"-Activie\" : \"\"}`} onClick={() => setIsShareOn(!isShareOn)}>\r\n          <div className=\"videoChatting-header-share-onoff\">\r\n            <img src={ShareOn} alt=\"MicOn\" className=\"videoChatting-header-share-on\" />\r\n            <img src={ShareOff} alt=\"MicOff\" className=\"videoChatting-header-share-off\" />\r\n          </div>\r\n          <div className={`slider-share${isShareOn ? \"-Activie\" : \"\"}`}></div>\r\n        </div>\r\n        <div className=\"videoChatting-header-login-info\">\r\n          <HeaderUser />\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"videoChatting-body\">\r\n        <div className={`videoChatting-group-video${isTextChattingClose ? \"-Chattingclose\" : \"\"}`}>\r\n          <div className={`videoChatting-localVideo-groups${isRemoteVideoClose ? \"-remoteclose\" : \"\"}${isTextChattingClose ? \"-Chattingclose\" : \"\"}`}>\r\n            <video ref={localVideoRef} autoPlay muted playsInline\r\n              className={`videoChatting-localVideo${isRemoteVideoClose ? \"-remoteclose\" : \"\"}${isTextChattingClose ? \"-Chattingclose\" : \"\"}`} />\r\n            <div className={`videoChatting-localVideo-sizeControl${isRemoteVideoClose ? \"-remoteclose\" : \"\"}${isTextChattingClose ? \"-Chattingclose\" : \"\"}`}>\r\n              {isRemoteVideoClose && isTextChattingClose ? (\r\n                <img src={ResizeScreen} alt=\"ResizeScreen\" onClick={handleScreenSizeMax} />\r\n              ) : (\r\n                <img src={MaxScreen} alt=\"maxScreen\" onClick={handleScreenSizeSmall} />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={`videoChatting-remoteVideo-group${isRemoteVideoClose ? \"-remoteclose\" : \"\"}${isTextChattingClose ? \"-Chattingclose\" : \"\"}`}>\r\n            {isRemoteVideoClose ? (\r\n              <img className=\"ArrowUp\" src={ArrowUp} alt=\"ArrowUp\" onClick={handleRemoteVideoOpen} />\r\n            ) : (\r\n              <img className=\"ArrowDown\" src={ArrowDown} alt=\"ArrowDown\" onClick={handleRemoteVideoOpen} />\r\n            )}\r\n            <div className={`videoChatting-remoteVideo-group-videos`} style={{ display: isRemoteVideoClose ? \"none\" : \"\" }}>\r\n              <div className=\"videoChatting-remoteVideo-video-participant\">\r\n                <video ref={remoteVideoRef} autoPlay muted playsInline\r\n                className=\"videoChatting-remoteVideo\"/>\r\n                <div className=\"videoChatting-remoteVideo-participant\">\r\n                  <p className=\"videoChatting-remoteVideo-participant-name\">이름이름</p>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"videoChatting-remoteVideo-video-participant\">\r\n                <video autoPlay muted playsInline\r\n                className=\"videoChatting-remoteVideo\"/>\r\n                <div className=\"videoChatting-remoteVideo-participant\">\r\n                  <p className=\"videoChatting-remoteVideo-participant-name\">이름이름</p>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"videoChatting-remoteVideo-video-participant\">\r\n                <video autoPlay muted playsInline\r\n                className=\"videoChatting-remoteVideo\"/>\r\n                <div className=\"videoChatting-remoteVideo-participant\">\r\n                  <p className=\"videoChatting-remoteVideo-participant-name\">이름이름</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"videoChatting-textChatting-toggle\">\r\n          {isTextChattingClose ? (\r\n            <img className=\"ArrowLeft\" src={ArrowLeft} alt=\"arrow_left\" onClick={handleTextChattingOpen} />\r\n          ) : (\r\n            <img className=\"ArrowRight\" src={ArrowRight} alt=\"arrow_right\" onClick={handleTextChattingOpen} />\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"videoChatting-textChatting-group\" style={{ display: isTextChattingClose ? \"none\" : \"\" }}>\r\n          <Chatting />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoChatting;\r\n"],"names":["_jsxs","className","children","_jsx","_ref","user_id","content","isMyMessage","concat","socket","io","connect","process","transports","cors","origin","textValue","setTextValue","useState","Messages","setMessages","SendMessages","setSendMessages","patient_cd","useEffect","emit","ack","on","data","console","error","prevMessages","JSON","stringify","user","off","map","msg","index","Message","type","name","value","onChange","e","target","handleSetValue","onClick","preventDefault","src","alt","isRemoteVideoClose","setIsRemoteVideoOpen","isTextChattingClose","setIsTextChattingOpen","isMicOn","setIsMicOn","isCameraOn","setIsCameraOn","isShareOn","setIsShareOn","isInitiator","isStarted","localStream","isChannelReady","pc","localVideoRef","useRef","remoteVideoRef","pcConfig","iceServers","urls","room","acknowledgmentData","log","id","array","apply","message","maybeStart","setRemoteDescription","RTCSessionDescription","doAnswer","candidate","RTCIceCandidate","sdpMLineIndex","label","addIceCandidate","navigator","mediaDevices","getUserMedia","video","audio","then","gotStream","catch","stream","current","srcObject","sendMessage","handleIceCandidate","event","sdpMid","handleCreateOfferError","handleRemoteStreamAdded","remoteStream","createPeerConnection","peerConnection","RTCPeerConnection","onicecandidate","onaddstream","alert","addStream","doCall","createOffer","setLocalAndSendMessage","createAnswer","onCreateSessionDescriptionError","sessionDescription","setLocalDescription","handleRemoteVideoOpen","handleTextChattingOpen","HeaderUser","ref","autoPlay","muted","playsInline","handleScreenSizeMax","handleScreenSizeSmall","style","display","Chatting"],"sourceRoot":""}